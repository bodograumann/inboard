name: tests

on:
  pull_request:
  push:
    branches: [develop, main]
    paths:
      - "**.lock"
      - "**.py"
      - "**.toml"
  workflow_dispatch:

env:
  POETRY_HOME: /opt/poetry
  POETRY_VERSION: 1.1.7
  POETRY_VIRTUALENVS_CREATE: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Poetry cache for Python dependencies
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Poetry
        run: |
          curl -fsS -o get-poetry.py \
            "https://raw.githubusercontent.com/python-poetry/poetry/$POETRY_VERSION/get-poetry.py"
          python get-poetry.py -y
          echo "$POETRY_HOME/bin" >> $GITHUB_PATH
      - name: Test Poetry version
        run: |
          POETRY_VERSION_INSTALLED=$(poetry -V)
          echo "The POETRY_VERSION environment variable is set to $POETRY_VERSION."
          echo "The installed Poetry version is $POETRY_VERSION_INSTALLED."
          case $POETRY_VERSION_INSTALLED in
          *$POETRY_VERSION*) echo "Poetry version correct." ;;
          *) echo "Poetry version incorrect." && exit 1 ;;
          esac
      - name: Install dependencies
        run: poetry install --no-interaction -E fastapi
      - name: Run unit tests
        run: pytest --cov-report=xml
      - name: Upload test coverage report to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          flags: unit
