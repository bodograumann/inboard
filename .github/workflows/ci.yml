name: ci

on:
  pull_request:
  push:
    branches: [develop, main]
    tags: ["[0-9]+.[0-9]+.[0-9]+*"]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: "1"
  PIPX_VERSION: "1.1.0"
  POETRY_VERSION: "1.1.11"

jobs:
  python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Poetry cache for Python dependencies
        uses: actions/cache@v3
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Set up pre-commit cache
        uses: actions/cache@v3
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: ${{ runner.os }}-pre-commit-
      - name: Install pipx for Python ${{ matrix.python-version }}
        run: python -m pip install "pipx==$PIPX_VERSION"
      - name: Install Poetry
        run: pipx install "poetry==$POETRY_VERSION"
      - name: Test Poetry version
        run: |
          POETRY_VERSION_INSTALLED=$(poetry -V)
          echo "The POETRY_VERSION environment variable is set to $POETRY_VERSION."
          echo "The installed Poetry version is $POETRY_VERSION_INSTALLED."
          case $POETRY_VERSION_INSTALLED in
          *$POETRY_VERSION*) echo "Poetry version correct." ;;
          *) echo "Poetry version incorrect." && exit 1 ;;
          esac
      - name: Install dependencies
        run: poetry install --no-interaction -E fastapi
      - name: Test virtualenv location
        run: |
          EXPECTED_VIRTUALENV_PATH=${{ github.workspace }}/.venv
          INSTALLED_VIRTUALENV_PATH=$(poetry env info --path)
          echo "The virtualenv should be at $EXPECTED_VIRTUALENV_PATH."
          echo "Poetry is using a virtualenv at $INSTALLED_VIRTUALENV_PATH."
          case "$INSTALLED_VIRTUALENV_PATH" in
          "$EXPECTED_VIRTUALENV_PATH") echo "Correct Poetry virtualenv." ;;
          *) echo "Incorrect Poetry virtualenv." && exit 1 ;;
          esac
      - name: Run spell check
        uses: streetsidesoftware/cspell-action@v2
        with:
          check_dot_files: true
          files: "**/*.md"
          incremental_files_only: false
          strict: true
      - name: Run pre-commit hooks
        run: poetry run pre-commit run --all-files
      - name: Run tests
        run: poetry run coverage run
      - name: Enforce test coverage
        run: poetry run coverage report
      - name: Build Python package with latest Python version and publish to PyPI
        if: github.ref_type == 'tag' && matrix.python-version == '3.10'
        run: |
          GIT_TAG_VERSION=${{ github.ref_name }}
          PACKAGE_VERSION=$(poetry version -s)
          echo "The Python package version is $PACKAGE_VERSION."
          echo "The Git tag version is $GIT_TAG_VERSION."
          if [ "$PACKAGE_VERSION" = "$GIT_TAG_VERSION" ]; then
            echo "Versions match."
          else
            echo "Versions do not match." && exit 1
          fi
          poetry publish --build -u __token__ -p ${{ secrets.PYPI_TOKEN }}
  docker:
    runs-on: ubuntu-latest
    needs: [python]
    strategy:
      fail-fast: false
      matrix:
        linux-version: ["", "alpine", "slim"]
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python3 -m pip install httpie
      - name: Set up versions and Docker tags for Python and Alpine Linux
        id: setup
        run: |
          LINUX_VERSION=${{ matrix.linux-version }}
          LINUX_TAG=${LINUX_VERSION:+-$LINUX_VERSION}
          PYTHON_VERSION=${{ matrix.python-version }}
          PYTHON_TAG="-python$PYTHON_VERSION"
          echo "LINUX_VERSION=$LINUX_VERSION" >> $GITHUB_ENV
          echo "LINUX_TAG=$LINUX_TAG" >> $GITHUB_ENV
          echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_ENV
          echo "PYTHON_TAG=$PYTHON_TAG" >> $GITHUB_ENV
      - name: Build Docker images
        run: |
          docker build . --rm --target base \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg LINUX_VERSION="$LINUX_VERSION" \
            --build-arg PIPX_VERSION="$PIPX_VERSION" \
            --build-arg POETRY_VERSION="$POETRY_VERSION" \
            --build-arg PYTHON_VERSION="$PYTHON_VERSION" \
            --cache-from ghcr.io/br3ndonland/inboard \
            -t ghcr.io/br3ndonland/inboard:base"$LINUX_TAG"
          docker build . --rm --target starlette \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg LINUX_VERSION="$LINUX_VERSION" \
            --build-arg PIPX_VERSION="$PIPX_VERSION" \
            --build-arg POETRY_VERSION="$POETRY_VERSION" \
            --build-arg PYTHON_VERSION="$PYTHON_VERSION" \
            -t ghcr.io/br3ndonland/inboard:starlette"$LINUX_TAG"
          docker build . --rm --target fastapi \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg LINUX_VERSION="$LINUX_VERSION" \
            --build-arg PIPX_VERSION="$PIPX_VERSION" \
            --build-arg POETRY_VERSION="$POETRY_VERSION" \
            --build-arg PYTHON_VERSION="$PYTHON_VERSION" \
            -t ghcr.io/br3ndonland/inboard:fastapi"$LINUX_TAG"
      - name: Run Docker containers for testing
        run: |
          docker run -d -p 80:80 --name inboard-base \
            -e "BASIC_AUTH_USERNAME=test_user" \
            -e "BASIC_AUTH_PASSWORD=r4ndom_bUt_memorable" \
            ghcr.io/br3ndonland/inboard:base"$LINUX_TAG"
          docker run -d -p 81:80 --name inboard-starlette \
            -e "BASIC_AUTH_USERNAME=test_user" \
            -e "BASIC_AUTH_PASSWORD=r4ndom_bUt_memorable" \
            ghcr.io/br3ndonland/inboard:starlette"$LINUX_TAG"
          docker run -d -p 82:80 --name inboard-fastapi \
            -e "BASIC_AUTH_USERNAME=test_user" \
            -e "BASIC_AUTH_PASSWORD=r4ndom_bUt_memorable" \
            ghcr.io/br3ndonland/inboard:fastapi"$LINUX_TAG"
      - name: Test Poetry version in Docker containers
        run: |
          test_poetry_version_in_docker() {
            echo "The POETRY_VERSION environment variable is set to $POETRY_VERSION."
            local poetry_version_in_docker
            for container_name in "$@"; do
              poetry_version_in_docker=$(docker exec "$container_name" poetry -V)
              if [ -n "$poetry_version_in_docker" ]; then
                echo "Docker container $container_name has $poetry_version_in_docker."
              fi
              case $poetry_version_in_docker in
              *$POETRY_VERSION*) echo "Poetry versions match for $container_name." ;;
              *) echo "Poetry version test failed for $container_name." && return 1 ;;
              esac
            done
          }
          test_poetry_version_in_docker inboard-base inboard-starlette inboard-fastapi
      - name: Test virtualenv location in Docker containers
        run: |
          test_virtualenv_location_in_docker() {
            local docker_poetry docker_python expected_poetry expected_python
            expected_poetry="/app/.venv"
            expected_python="$expected_poetry/bin/python"
            echo "The Poetry virtualenv should be at $expected_poetry."
            echo "The Python executable should be at $expected_python."
            for container_name in "$@"; do
              docker_poetry=$(docker exec "$container_name" poetry env info --path)
              docker_python=$(docker exec "$container_name" which python)
              case "$docker_poetry" in
              "$expected_poetry") echo "Correct Poetry virtualenv $docker_poetry for $container_name." ;;
              *) echo "Incorrect Poetry virtualenv $docker_poetry for $container_name." && return 1 ;;
              esac
              case "$docker_python" in
              "$expected_python") echo "Correct Python $docker_python for $container_name." ;;
              *) echo "Incorrect Python $docker_python for $container_name." && return 1 ;;
              esac
            done
          }
          test_virtualenv_location_in_docker inboard-base inboard-starlette inboard-fastapi
      - name: Smoke test Docker containers
        run: |
          handle_error_code() {
            case "$1" in
            2) : 'Request timed out!' ;;
            3) : 'Unexpected HTTP 3xx Redirection!' ;;
            4) : 'HTTP 4xx Client Error!' ;;
            5) : 'HTTP 5xx Server Error!' ;;
            6) : 'Exceeded --max-redirects=<n> redirects!' ;;
            *) : 'Other Error!' ;;
            esac
            echo "$_"
            return "$1"
          }
          smoke_test() {
            if http --check-status --ignore-stdin -q --timeout=5 "$@"; then
              echo 'Smoke test passed. OK!'
            else
              handle_error_code "$?"
            fi
          }
          smoke_test_xfail() {
            if http --check-status --ignore-stdin -q --timeout=5 "$@" &>/dev/null; then
              echo 'Smoke test should have failed!'
              return 1
            else
              echo 'Smoke test expected to fail. OK!'
            fi
          }
          smoke_test :80
          smoke_test :81
          smoke_test :82
          smoke_test -a test_user:r4ndom_bUt_memorable :81/status
          smoke_test -a test_user:r4ndom_bUt_memorable :82/status
          smoke_test_xfail -a test_user:incorrect_password :81/status
          smoke_test_xfail -a test_user:incorrect_password :82/status
          smoke_test_xfail :81/status
          smoke_test_xfail :82/status
      - name: Log in to Docker registry
        if: >
          github.ref_type == 'tag' ||
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io \
            -u ${{ github.actor }} --password-stdin
      - name: Tag and push Docker images with latest tags
        if: >
          matrix.python-version == '3.10' &&
          (
            github.ref_type == 'tag' ||
            github.ref == 'refs/heads/develop' ||
            github.ref == 'refs/heads/main'
          )
        run: |
          docker push ghcr.io/br3ndonland/inboard:base"$LINUX_TAG"
          docker push ghcr.io/br3ndonland/inboard:starlette"$LINUX_TAG"
          docker push ghcr.io/br3ndonland/inboard:fastapi"$LINUX_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:fastapi"$LINUX_TAG" \
            ghcr.io/br3ndonland/inboard:latest"$LINUX_TAG"
          docker push ghcr.io/br3ndonland/inboard:latest"$LINUX_TAG"
      - name: Tag and push Docker images with Python version
        if: github.ref_type == 'tag' || github.ref == 'refs/heads/main'
        run: |
          docker tag \
            ghcr.io/br3ndonland/inboard:base"$LINUX_TAG" \
            ghcr.io/br3ndonland/inboard:base"$PYTHON_TAG$LINUX_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:starlette"$LINUX_TAG" \
            ghcr.io/br3ndonland/inboard:starlette"$PYTHON_TAG$LINUX_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:fastapi"$LINUX_TAG" \
            ghcr.io/br3ndonland/inboard:fastapi"$PYTHON_TAG$LINUX_TAG"
          docker push ghcr.io/br3ndonland/inboard:base"$PYTHON_TAG$LINUX_TAG"
          docker push ghcr.io/br3ndonland/inboard:starlette"$PYTHON_TAG$LINUX_TAG"
          docker push ghcr.io/br3ndonland/inboard:fastapi"$PYTHON_TAG$LINUX_TAG"
      - name: Tag and push Docker images with Git tag
        if: github.ref_type == 'tag'
        run: |
          GIT_TAG_FULL=${{ github.ref_name }}
          GIT_TAG_MAJOR_MINOR=$(echo "$GIT_TAG_FULL" | cut -d '.' -f 1-2)
          for GIT_TAG in "$GIT_TAG_FULL" "$GIT_TAG_MAJOR_MINOR"; do
            docker tag \
              ghcr.io/br3ndonland/inboard:"base$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"base-$GIT_TAG$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"starlette$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"starlette-$GIT_TAG$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"fastapi$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"fastapi-$GIT_TAG$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"base$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"base-$GIT_TAG$PYTHON_TAG$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"starlette$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"starlette-$GIT_TAG$PYTHON_TAG$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"fastapi$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"fastapi-$GIT_TAG$PYTHON_TAG$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"base$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"$GIT_TAG-base$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"starlette$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"$GIT_TAG-starlette$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"fastapi$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"$GIT_TAG-fastapi$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"base$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"$GIT_TAG-base$PYTHON_TAG$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"starlette$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"$GIT_TAG-starlette$PYTHON_TAG$LINUX_TAG"
            docker tag \
              ghcr.io/br3ndonland/inboard:"fastapi$LINUX_TAG" \
              ghcr.io/br3ndonland/inboard:"$GIT_TAG-fastapi$PYTHON_TAG$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"base-$GIT_TAG$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"starlette-$GIT_TAG$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"fastapi-$GIT_TAG$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"base-$GIT_TAG$PYTHON_TAG$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"starlette-$GIT_TAG$PYTHON_TAG$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"fastapi-$GIT_TAG$PYTHON_TAG$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"$GIT_TAG-base$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"$GIT_TAG-starlette$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"$GIT_TAG-fastapi$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"$GIT_TAG-base$PYTHON_TAG$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"$GIT_TAG-starlette$PYTHON_TAG$LINUX_TAG"
            docker push ghcr.io/br3ndonland/inboard:"$GIT_TAG-fastapi$PYTHON_TAG$LINUX_TAG"
          done
  changelog:
    if: github.ref_type == 'tag'
    needs: [python, docker]
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: develop
      - name: Generate changelog from Git tags
        run: |
          echo '# Changelog
          ' >CHANGELOG.md

          echo '# Changelog

          [View on GitHub](https://github.com/br3ndonland/inboard/blob/develop/CHANGELOG.md)
          ' >docs/changelog.md

          GIT_LOG_FORMAT='## %(subject) - %(taggerdate:short)

          %(contents:body)
          Tagger: %(taggername) %(taggeremail)

          Date: %(taggerdate:iso)

          ```text
          %(contents:signature)```
          '

          git tag -l --sort=-taggerdate:iso --format="$GIT_LOG_FORMAT" >>CHANGELOG.md
          git tag -l --sort=-taggerdate:iso --format="$GIT_LOG_FORMAT" >>docs/changelog.md

          # shellcheck disable=SC2016
          ESCAPE_DUNDERS='s:([^`])(__)([a-z]+)(__)([^`]):\1\\_\\_\3\\_\\_\5:g'
          sed -Ei "$ESCAPE_DUNDERS" CHANGELOG.md
          sed -Ei "$ESCAPE_DUNDERS" docs/changelog.md
      - name: Format changelog with Prettier
        run: npx -s -y prettier@'^2' --write CHANGELOG.md docs/changelog.md
      - name: Create pull request with updated changelog
        uses: peter-evans/create-pull-request@v4
        with:
          add-paths: |
            CHANGELOG.md
            docs/changelog.md
          author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
          branch: create-pull-request/${{ github.ref_name }}
          commit-message: Update changelog for version ${{ github.ref_name }}
          title: Update changelog for version ${{ github.ref_name }}
